// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                       Int                        @id @default(autoincrement())
  name                     String?
  profilePicture           String?
  email                    String                     @unique
  password                 String?
  googleId                 String?
  isAdmin                  Boolean                    @default(false)
  SelfCheckLandingJob      SelfCheckLandingJob[]
  SelfCheckLinkedinProfile SelfCheckLinkedinProfile[]
  SelfCheckProfessions     SelfCheckProfessions[]
}

model CategoryLandingJob {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  TaskLandingJob TaskLandingJob[]
}

model TaskLandingJob {
  id                  Int                   @id @default(autoincrement())
  categoryId          Int
  description         String
  SelfCheckLandingJob SelfCheckLandingJob[]
  categoryLandingJob  CategoryLandingJob    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SelfCheckLandingJob {
  id             Int            @id @default(autoincrement())
  taskId         Int
  userId         Int
  status         Boolean        @default(false)
  updatedAt      DateTime       @updatedAt
  taskLandingJob TaskLandingJob @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          Users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CategoryLinkedinProfile {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  TaskLinkedinProfile TaskLinkedinProfile[]
}

model TaskLinkedinProfile {
  id                       Int                        @id @default(autoincrement())
  categoryId               Int
  description              String
  SelfCheckLinkedinProfile SelfCheckLinkedinProfile[]
  categoryLinkedinProfile  CategoryLinkedinProfile    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ReferencesLinkedinProfile {
  id       Int    @id @default(autoincrement())
  fileId   String
  imageUrl String
}

model SelfCheckLinkedinProfile {
  id                  Int                 @id @default(autoincrement())
  taskId              Int
  userId              Int
  status              Boolean             @default(false)
  updatedAt           DateTime            @updatedAt
  taskLinkedinProfile TaskLinkedinProfile @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               Users               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Professions {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  TaskProfessions TaskProfessions[]
}

model TaskProfessions {
  id                   Int                    @id @default(autoincrement())
  professionId         Int
  description          String
  SelfCheckProfessions SelfCheckProfessions[]
  professions          Professions            @relation(fields: [professionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SelfCheckProfessions {
  id              Int             @id @default(autoincrement())
  taskId          Int
  userId          Int
  status          Boolean         @default(false)
  updatedAt       DateTime        @updatedAt
  taskProfessions TaskProfessions @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           Users           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Testimonials {
  id          Int    @id @default(autoincrement())
  name        String
  image       String
  position    String
  description String
}

model Faq {
  id          Int    @id @default(autoincrement())
  question    String
  description String
}
